21. ¿Qué diferencia hay entre "\t\n" y ’\t\n’?

Las comillas dobles “ “ busca las sustituciones, secuencias  que empiezan por una barra / y la reemplaza por su valor binario, por ejemplo /n y también la secuencia #{expresión } es sustituida por el valor de la expresión.  Las comillas simples, sin embargo muestran la secuencia de escape tal cual.
En el 1er caso se haría la tabulación y el salto de línea y en el segundo se mostraría t\n.


22. ¿Cómo funciona %q? ¿Qué es %q{hello world\n}? ¿Qué es %q{’a’ ’b’ ’c’}?

Construye una cadena de literales como si estuviera delimitada entre comillas simples.
%q{hello world\n}
=> “hello world\\n”
%q{’a’ ’b’ ’c’}
=> “a b c”

23. ¿Cómo funciona %Q? ¿Qué es %Q{hello world\n}? ¿Qué es %Q{"a" "b" "c"}?

Construye una cadena de literales como si estuviera delimitada entre comillas dobles.
%Q{hello world\n}
=> “hello world\n”
%Q{’a’ ’b’ ’c’}
=> “a b c”

24. ¿Qué queda en c?
irb(main):001:0> a = 4
=> 4
irb(main):002:0> b =2
=> 2
irb(main):003:0> c = <<HERE
irb(main):004:0" --#{a}--
irb(main):005:0" --#{b}--
irb(main):006:0" HERE

“--4--\n--2--\n”
# HERE sin comillas, hace que todo el código que escriba entre dos here se meta en la variable c y se interpreten los comandos. Funciona como si estuviese entre comillas dobles.


25. ¿Qué queda en c?
irb(main):001:0> a = 4
=> 4
irb(main):002:0> b =2
=> 2
irb(main):008:0> c = <<’HERE’
irb(main):009:0’ --#{a}--
irb(main):010:0’ --#{b}--
irb(main):011:0’ HERE

“--#(a)--\n--#(b)--\n”
# “HERE” con comillas simples, hace que todo el código que escriba entre dos here se meta en la variable c y no se interpreten los comandos. Funciona como si estuviese entre comillas simples.

26. s = "hello". ¿Cuál es el valor de las siguientes expresiones?
s[0,2]        he # A partir de la posición 0 muestra 2 caracteres
s[-1,1]        o   # La posición -1 se cuenta de Izquierda a derecha y muestra un caracter.
s[0,10]        hello # Muestra desde la posición 0, 10 caracteres.

27. ¿Qué queda en g?
> g = "hello"
=> "hello"
> g << " world"

“hello word”
# g es el resultado de la concatenación de  lo que había en g y la cadena que le pasas.

28. ¿Qué queda en e?
> e = ’.’*3

“. . .” # En e queda la cadena “.” repetida 3 veces.

29. ¿Cuál es el resultado?
>> a = 1
=> 1
>> "#{a=a+1} "*3

“2 2 2” El resultado es la operación concatenada 3 veces

30. ¿Qué es esto? %w[this is a test]

[“This”,”is”,”a”,test”]
Es un array de 3 elementos de caracteres y %w es un atajo a la hora de declararlo.

31. ¿Qué es esto? %w[\t \n]

Es este array
[“\\t”, “\\n”] #Es un array donde se guarda la cadena \t y \n tal cual, si no tubieran la \ delante serían un retorno de carro.

32. ¿Qué es esto? %W[\t \n]

[“\t”, “\n”] Se guarda la expresión evaluada, en este caso un retorno de carro.


33. ¿Qué contiene nils? nils = Array.new(3)
Nil es un tipo de objeto como puede ser int.

[nil,nil,nil] #Crea un array con 3 objetos nil

34. ¿Qué contiene zeros? zeros = Array.new(3, 0)

[0,0,0] #Contiene un array de 3 elementos y el valor de los 3 es 0.

35. ¿Qué queda en b?
>> x = [[1,2],[3,4]] #Crea un array de 2 elementos y cada uno de estos otro array de dos.
=> [[1, 2], [3, 4]] 
>> b = Array.new(x) #crea una copia del array x
[[1,2],[3,4]] 

36. ¿Qué queda en c?
>> c = Array.new(3) { |i| 2*i }
[0,2,4]

37. ¿Cuál es el resultado de cada una de estas operaciones?
>> a = (’a’..’e’).to_a  
=> ["a", "b", "c", "d", "e"]  # Itera desde ‘a’ hasta ‘e’ y lo almacena en a.
>> a[1,1]
=>[“b”]  # Muestra desde la posición 1, 1 elemento.
>> a[-2,2]
=>[“d”,”e”] # Muestra desde la posición -2, 2 elementos.
>> a[0..2] 
=>[“a”,”b”,”c”]  # Muestra de 0 a 2.
>> a[0..1]
=>[“a”,”b”] #Muestra de 0 a 1.
>> a[-2..-1]
=>[“d”,”e”] # Muestra de -2 a -1.

38. ¿Cuál es el resultado de cada una de estas operaciones?
>> a
=> ["a", "b", "c", "d", "e"]
>> a[0,2] = %w{A B} # cambia la posición 0 y 2 por A y B
=> ["A", "B"]
>> a
=>["A", "B", "c", "d", "e"]    #Sustituye lo que hay en las casillas 0 y 1 del vector.
>> a[2..5] = %w{C D E}# cambia de 2 a 5.
=> ["C", "D", "E"]
>> a
=>["A", "B", "C", "D", "E"]    #Sustituye lo que hay desde la casilla 2 hasta la 5..
>> a[0,0] = [1,2,3] #Inserta antes de la posición 0 , los valores 1,2,3. 
=> [1, 2, 3]
>> a
=>[1,2,3,"A", "B", "C", "D", "E"]    #Añade por el principio.
>> a[0,2] = []# 0 y 2 los cambia por []
=> []
>> a
=>[3,"A", "B", "C", "D", "E"]        # Borra las dos primeras posiciones.    

>> a[-1,1] = [ ’Z’ ]
=> ["Z"]
>> a
=>[3,"A", "B", "C", "D", "Z"]    # Sustituye el valor de la última casilla
>> a[-2,2] = nil 
=> nil
>> a
=>[,3,"A", "B", "C",nill]        #Desde la posición -2, 2 elementos los sustituye por nil.

39. ¿Cuál es el resultado de cada una de estas operaciones?
>> a = (1...4).to_a     # Un array de enteros de 1 a 3
=>[1,2,3]
>> a = a + [4, 5]     # se le añade el array 4 y 5
=>[1,2,3,4,5]
>> a += [[6, 7, 8]]    # Si no están los valores se añaden al array
=>[1,2,3,4,5,6,7,8]
>> a = a + 9
Da un error, no reconoce el numero como un array abria que poner:
>> a = a + [9]

40. ¿Cuál es el resultado de cada una de estas operaciones?
>> x = %w{a b c b a} #Un array de 5 elementos
=>[“a”,”b”,”c”,”b”,”a”]
>> x = x - %w{b c d} #Se le restan los elementos al array
=>[“a”,”a”]

41. ¿Cuál es el resultado de cada una de estas operaciones?
>> z = [0]*8 #Crea un array de 8 elementos en los que se almacena 0.
=>[0,0,0,0,0,0,0,0]
 
42. ¿Cuál es el resultado de cada una de estas operaciones?
>> a = []  #Un array vacío.
=> []
>> a << 1 # Se añade el numero al array
=>[1]
>> a << 2 << 3 # Se añade 2 y 3 al array
=>[1,2,3]
>> a << [4, 5, 6]  # Se añade al array como un único objeto que almacena los 3 valores.
=>[1,2,3,[4,5,6]]
>> a.concat [7, 8]
=>[1,2,3,[4,5,6],7,8]
# “<<” y .concat[ ] se utilizan para concatenar elementos en un array.



43. ¿Cuál es el resultado de cada una de estas operaciones?
>> a = [1, 1, 2, 2, 3, 3, 4]
=> [1, 1, 2, 2, 3, 3, 4]
>> b = [5, 5, 4, 4, 3, 3, 2]
=> [5, 5, 4, 4, 3, 3, 2]
>> c = a | b #En c están los valores que están en a o b
=>[1,2,3,4,5]
>> d = b | a #En c están los valores que están en b o a
=>[5,4,3,2,1]
>> e = a & b #En c están los valores que están en a y b
=>[2,3,4]
>> f = b & a #En c están los valores que están en b y a
=>[4,3,2]

44. ¿Qué resultados dan las siguientes operaciones?
>> a = 1..10 #En a se almacena un rango de 1 a 10.
=> 1..10
>> a.class #Dice de que tipo es el elemento a
=> Range
>> a.to_a
    =>[1,2,3,4,5,6,7,8,9,10]
>> b = 1...10
=> 1....10
>> b.to_a
=>[1,2,3,4,5,6,7,8,9,10]
>> b.include? 10 # Responde a si en b esta el valor 10
=>true
>> b.include? 8
=>true
>> b.step(2) {|x| print "#{x} " } #Muestra de 2 en 2 los valores de b.
=>1 3 5 7 9 => 1...10
>> 1..3.to_a
Da un error no reconoce 1..3 como un array sino como un número.

45. ¿Qué resultados dan las siguientes operaciones?
>> r = 0...100 #En a se almacena un rango de 1 a 100.
=> 0....100
>> r.member? 50 #Responde si 50 es miembro
=>true
>> r.include? 99.9 #Responde si 99.9 esta incluido en el rango.
=>true
>> r.member? 99.9 #Responde si 99.9 es miembro
=>true

46. ¿Qué resultados dan las siguientes operaciones?
>> true.class
=>TrueClass
>> false.class
=>FalseClass
>> puts "hello" if 0 #Se evalua como verdad por que falta la condición. ¿ 0 es verdad?
hello
=>nil
>> puts "hello" if nil 
    =>nil
>> puts "hello" if ""
hello
=>nil

47. ¿Qué resultados dan las siguientes operaciones?
>> x = :sym # En x se guarda un símbolo.
=> :sym
>> x.class
=>Symbol
>> x == ’sym’ # Un símbolo no es una cadena por eso retorna false.
=>false
>> x == :sym 
=>true
>> z = :’a long symbol’
=> :"a long symbol"
>> z.class
=>Symbol
>> x == ’sym’.to_sym #Convierte ‘sym’ en un símbolo y lo compara
=>true
>> x.to_s == ’sym’ #Convierte x es un string y lo compara
=>true


48. ¿Qué resultados se dan?
>> s = "Ruby"
=> "Ruby"
>> t = s
=> "Ruby"
>> t[-1] = ""
=> ""
>> print s
Rub => nil
>> t = "Java"
=> "Java"
>> print s, t
Rub Java => nil


49. ¿Cuál es el resultado?
>> "%d %s" %[3, "rubies"]
=>”3 rubies”
#Evalúa las % y los intercambia por lo que está a la derecha, como un printf de c, %d equivale a dígito y %s a un string.

50. ¿Cuáles son los resultados?
>> x, y = 4, 5 # Crea dos variables y les asigna un valor.
=>[4, 5]
>> z = x > y ? x : y # Responde a la pregunta con la primera opción si es cierto, si es falso la segunda.
=>5
>> x,y,z = [1,2,3] # Crea tres variables y les asigna un valor.
=>[1, 2, 3]

51. ¿Qué resultados dan las siguientes operaciones?
>> x = { :a => 1, :b => 2 }
=> {:a=>2, :b=>1}
>> x.keys    #Muestra las claves de x
=>[:a, :b]
>> x.values     #Muestra los valores de x
=>[1,2]
>> x[:c] = 3    # Añade una objeto al hash
=> 3
>> x
=>{:a=>1, :b=>2, :c=3}
>> x.delete(’a’)     #No hace nada un string no es igual a la clave.
=> nil
>> x
=>{:a=>1, :b=>2, :c=3}
>> x.delete(:a)     #Borra una variable usando la clave.
=> 1
>> x
=>{:b=>2, :c=3}
>> x = { :a => 1, :b => 2, :c => 4 }
=> {:a=>1, :b=>2, :c=>4}
>> x.delete_if { |k,v| v % 2 == 0 } #Borra segun la condicion, divisible por 2.
=>{:a=>1}
>> x
=>{:a=>1}


52. ¿Qué hace yield 4, 5?

Estamos proporcionando parámetros a la llamada a yield, los cuales serán pasados al bloque. Dentro del bloque, los nombres de los argumentos estarán listados mediante barras verticales (|) para recibir estos parámetros.

53. ¿Qué hace la siguiente sentencia? counts = Hash.new(0) 
¿Qué diferencia hay con la asignación counts = {}?

Los elementos del Hash son inicializados a 0 automáticamente en el primer caso.

En el segundo a nil.

54. ¿Qué retorna esta expresión? ’hello world, hello LPP’.scan /\w+/

[“hello”, “world”, “hello”, “LPP”]     #Te devuelve las palabras que tiene la frase. 

55. Explique que hacen estas sentencias:
c = { :a => 3, :b => 2, :c => 1 }
{ :a => 3, :b => 2, :c => 1 } # Crea un hash de 3 elementos asignando la clave y el valor.
c.keys.sort.each { |k| puts c[k] } # Por cada clave k muestra el valor.
3
2
1
    =>[:a, :b, :c]

